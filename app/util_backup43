package tools

import (
	"crypto/rand"

	"fmt"
	"io"
	MathRand "math/rand"
	"strconv"
	"strings"
	"time"

	"server.local/gweb/tool"
)

var rander = rand.Reader

func randomBits(b []byte) {
	if _, err := io.ReadFull(rander, b); err != nil {
		panic(err.Error()) // rand should never fail
	}

}

//四舍五入
//decimal:保留小数位数
func RoundFloat64(data interface{}, decimal int) float64 {
	s := fmt.Sprintf("%."+strconv.Itoa(decimal)+"f", data)
	ib, err := strconv.ParseFloat(s, 64)
	glog.Error(err)
	//fmt.Println(ib)
	return ib
}

//四舍五入
//decimal:保留小数位数
func RoundInt64(data interface{}, decimal int) int64 {
	s := fmt.Sprintf("%."+strconv.Itoa(decimal)+"f", data)
	ib, err := strconv.ParseInt(s, 10, 64)
	glog.Error(err)
	//fmt.Println(ib)
	return ib
}
func BytesToInt64(data []byte) int64 {
	s := string(data)
	if strings.EqualFold(s, "") {
		return 0
	}
	i, err := strconv.ParseInt(s, 10, 64)
	glog.Error(err)
	if err != nil {
		return 0
	}
	return i
}
func BytesToFloat64(data []byte) float64 {
	s := string(data)
	if strings.EqualFold(s, "") {
		return 0
	}
	i, err := strconv.ParseFloat(s, 64)
	glog.Error(err)
	if err != nil {
		return 0
	}
	return i
}

func Rand(max int) int {
	r := MathRand.New(MathRand.NewSource(time.Now().UnixNano()))
	return r.Intn(max)
}

/*

func CipherEncrypter(tkey, tvalue string) string {
	key := []byte(tkey)
	plaintext := []byte(tvalue)

	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err)
	}

	// The IV needs to be unique, but not secure. Therefore it's common to
	// include it at the beginning of the ciphertext.
	ciphertext := make([]byte, aes.BlockSize+len(plaintext))
	iv := ciphertext[:aes.BlockSize]
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		panic(err)
	}

	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(ciphertext[aes.BlockSize:], plaintext)

	// It's important to remember that ciphertexts must be authenticated
	// (i.e. by using crypto/hmac) as well as being encrypted in order to
	// be secure.
	//fmt.Printf("%s", ciphertext)
	return hex.EncodeToString(ciphertext)

}
func CipherDecrypter(tkey string, crypter string) (string, error) {
	key := []byte(tkey)
	ciphertext, _ := hex.DecodeString(crypter)

	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	// The IV needs to be unique, but not secure. Therefore it's common to
	// include it at the beginning of the ciphertext.
	if len(ciphertext) < aes.BlockSize {
		return "", errors.New("必须是aes.BlockSize的倍数")
	}
	iv := ciphertext[:aes.BlockSize]
	ciphertext = ciphertext[aes.BlockSize:]

	stream := cipher.NewCFBDecrypter(block, iv)

	// XORKeyStream can work in-place if the two arguments are the same.
	stream.XORKeyStream(ciphertext, ciphertext)
	//fmt.Printf("%s", ciphertext)
	return string(ciphertext), nil
}
*/
